---
author: admin
comments: true
date: 2010-06-20 21:02:02
layout: post
slug: base64-encode
title: Base64 介绍+加密算法
wordpress_id: 715
categories:
- PROGRAM
---


	**Base64 定义：  

	**





> 
	
> 
> 
		Base64内容传送编码被设计用来把任意序列的8位字节描述为一种不易被人直接识别的形式
	
> 
> 






	**Base 64 产生：**





> 
	
> 
> 
		在设计这个编码的时候，我想设计人员最主要考虑了3个问题：
	
> 
> 
	
> 
> 
		1.是否加密？   

		2.加密算法复杂程度和效率   

		3.如何处理传输？   

		 加密是肯定的，但是加密的目的不是让用户发送非常安全的mail。这种加密方式主要就是"防君子不防小人"。即达到一眼望去完全看不出内容即可。基于这个目的加密算法的复杂程度和效率也就不能太大和太低。和上一个理由类似，MIME协议等用于发送Email的协议解决的是如何收发Email，而并不 是如何安全的收发Email。因此算法的复杂程度要小，效率要高，否则因为发送Email而大量占用资源，路就有点走歪了。   

		 但是，如果是基于以上两点，那么我们使用最简单的恺撒法即可，为什么Base64看起来要比恺撒法复杂呢？这是因为在Email的传送过程中，由于历史原 因，Email只被允许传送ASCII字符，即一个8位字节的低7位。因此，如果您发送了一封带有非ASCII字符（即字节的最高位是1）的Email通 过有"历史问题"的网关时就可能会出现问题。网关可能会把最高位置为0！很明显，问题就这样产生了！因此，为了能够正常的传送Email，这个问题就必须 考虑！所以，单单靠改变字母的位置的恺撒之类的方案也就不行了
	
> 
> 






	**Base 64 算法描述：**





> 
	
> 
> 
		 我们知道通常的计算机系统当中，一个字节是由8个二进制位组成的，例如"A"的ASCII编码值是十进制数的65，转换成二进制数就是"01000001"，而BASE64算法就是在这样的二进制的基础上进行编码的。  

		
	
> 
> 
	
> 
> 
		 Base64编码要求把3个8位字节（3*8=24）转化为4个6位的字节（4*6=24），之后在6位的前面补两个0，形成8位一个字节的形式。算法首先取3个字节的数据，转换成二进制，我们就用可爱的企鹅举个例子吧： "TUX"
	
> 
> 
	
> 
> 
		转换成二进制：
	
> 
> 
	
> 
> 
		"01010100 01010101 01011000" (注意：这里每个字节间的空格实际上是不存在的)  

		这样我们就得到了8*3=24个二进制位组成的序列，然后再将这24个位每6个分一组，分24/6=4组：  

		"010101 000101 010101 011000"  

		将这四个分组高位补零，形成可以转换为一个字节的8位:  

		"00010101 00000101 00010101 00011000"  

		再将这四个字节转换成十进制数：  

		"21 5 21 24"
	
> 
> 
	
> 
> 
		根据下表
	
> 
> 
	
> 
> 
		[![](http://www.freetstar.com/wp-content/uploads/2010/06/Screenshot2-300x198.png)](http://www.freetstar.com/wp-content/uploads/2010/06/Screenshot2.png) 
	
> 
> 
	
> 
> 
		 用刚才我们得到的四个十进制数在表中查到相应的字符值：  

		"VFVY"
	
> 
> 
	
> 
> 
		 可是这里就有一个问题了，如果待加密的数据的长度不是3的整数倍怎么办，我们怎么做到每次取3个数进行加密呢？
	
> 
> 
	
> 
> 
		例：加密"Linux"  

		=>"01001100 01101001 01101110 01110101 01111000 （pad）"  

		 用（pad）来暂时补齐3的整数倍个字节；  

		=>"010011 000110 100101 101110 011101 010111 1000（00） （pad）"  

		 注意：最后两个"0"是补上的，保证每个分组6位数；  

		=>"00010011 00000110 00100101 00101110 00011101 00010111 00100000 （pad）"  

		=>"19 6 37 46 29 23 32 （pad）"  

		=>"TGludXg="  

		 这样就完成了编码！  

		 其实"(pad)"就是个记号，用了几个"(pad)"，就在末尾补几个"="！因此很多编码后得到的字符串都是以一个或两个"="结尾的，这也是可以识别BASE64编码的一个重要的特点
	
> 
> 






	**Base 64 加密算法C语言实现 **  

	[code language="c"]
 #include<stdio.h>
#include<stdlib.h>
#include<string.h>

//base64编码表
static char base64_table[] = {
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
	'L', 'M','N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
	'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
	'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
	's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2',
	'3', '4', '5', '6', '7', '8', '9', '+', '/', '\0'
};

static char str_pad = '=';//pad 用“=”标记

char *base64_encode(char *str, int length)
{  
        char *result,*p;
	if(str == NULL || length <1)return NULL;          
	//分配空间,加密后的字符串长度是原字符串的4/3
	result = (char *)malloc(((length + 2)/3)*4);
	p = result;
	if(result == NULL)
	{
	printf("malloc failed\n");
	return NULL;
	}
	//这是剩余字符串长度大于等于3的情况
	//通过位移来截取字节的位数
	//第一个字节右移2位，得到base64的第一个目标字符
	//第一个字节&0x03（00000011）后，再加上第二个字节右移4位，得到base64的第二个目标字符
	//第二个字节&0x0f (00001111) 后，再加上第三个字节右移4位，得到base64的第三个目标字符
	//第三个字节&0x3f (00111111) 后，得到base64的第四个目标字符
	while( length > 2)
	{
	*result++ = base64_table[str[0] >> 2];
	*result++ = base64_table[((str[0] & 0x03) << 4) + (str[1] >> 4)];
	*result++ = base64_table[((str[1] & 0x0f) << 2) + (str[2] >> 6)];
	*result++ = base64_table[str[2] & 0x3f];
	length -= 3;
	str += 3;
	}
	//剩余字符串长度小于3
	if(length != 0)
	{
	*result++ = base64_table[str[0] >> 2];
	//剩余长度为2
		if(length > 1)
		{
		*result++ = base64_table[((str[0] & 0x03) << 4) + (str[1] >> 4)];
		*result++ = base64_table[(str[1] & 0x0f) << 2];
		*result++ = str_pad; //不够的补"="
		}
		//剩余字符串长度是1
		else
		{
		*result++ = base64_table[(str[0] & 0x03) << 4];
		*result++ = str_pad;//不够的补"="
		*result++ = str_pad;//不够的补"="
		}
	}
	*result ='\0';
	//输出结果
	printf("result:%s\n",p);
	return p;
}

int main(int agrc,char **argvv)
{
	char *str,*result;
	int len;
	str = argv[1];
	len  = strlen(str);
	printf("the len is %d \n",len);
	result = base64_encode(str, len);
	return 1;
}
	[/code]






	参考资料：[http://blog.csdn.net/wangjj_016/archive/2008/09/14/2794245.aspx](http://blog.csdn.net/wangjj_016/archive/2008/09/14/2794245.aspx)






	 [http://hi.baidu.com/yjsword/blog/item/81b930956a88ad0a7af480d2.html](http://hi.baidu.com/yjsword/blog/item/81b930956a88ad0a7af480d2.html)






	 [http://blog.csdn.net/xueleng/archive/2006/03/24/637561.aspx](http://blog.csdn.net/xueleng/archive/2006/03/24/637561.aspx)




